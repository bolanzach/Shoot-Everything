package visual.dynamic.described;

import io.ResourceFinder;

import java.awt.geom.*;

import visual.statik.TransformableContent;

/**
 * An enemy Bernstein character in the Top Down Shooter
 *
 * @author  Zachary Bolan
 * @version 11/13/13
 */
public class BossBernstein extends AbstractGameSprite
						   implements Enemy
{
    private double     		dX, dY, radAngle;
    private int				health;

    
    
    /**
     * Explicit Value Constructor
     *
     * @param content     The static visual content
     * @param startX	  The x location to be rendered at
     * @param startY	  The y location to be rendered at
     * @param mouseX	  The x location of the mouse
     * @param mouseY	  The y location of the mouse
     */
    public BossBernstein(TransformableContent content, ResourceFinder finder,
    					double startX, double startY,
    					double dX, double dY)
    {
    	super(content, finder);
    	init(startX, startY, dX, dY);
    }
    
    
    public void doCollisions() {

    			health -=1;
    			if (health == 0 ) {
    				setSpeed(0);
    				setVisible(false);
        			isDestroyed = true;
        			sf.playAudio("wilhelmScream.wav");
        			reset();
    			}
    			
    }
    
    
    synchronized public void init(double startX, double startY, double dX, double dY) {

       	
       	isDestroyed = false;
       	isAvailable = false;
    	
       	double				tx, ty, distance, rotateX, rotateY, rotAngle;
    	Rectangle2D         bounds;

        bounds = content.getBounds2D(false);
        x = startX;
        y = startY;
        health = 4;

        // Set the initial rotation and location
   		tx = dX - x;
   		ty = dY - y;
   		distance = Math.sqrt(tx * tx + ty * ty);
   	
		rotateX = (tx / distance);
		rotateY = (ty / distance);
		rotAngle = rotateY/rotateX;

		radAngle = Math.atan2(rotAngle/rotateX, rotAngle/rotateY);
        
        setSpeed(6);
        antagonists.clear();
       	setLocation(x, y);
       	setVisible(true);
    }
    
    
    
    /**
     * Handle a tick event (generated by the Stage)
     * 
     * Move the location of the zombie and check for intersections
     *
     * @param time  The current time (which is not used)
     */
    public synchronized void handleTick(int time)
    {

    	if (!isDestroyed) {
    		
    		// Advance the position of this Bernstein
    		x += speed * Math.cos(radAngle);
    		y += speed * Math.sin(radAngle);
    		setLocation(x, y);
    	
    		// Check if Bernstein is "out-of-bounds"
    		if (x>900 || x<-100 || y>700 || y<-100) {
    			setSpeed(0);
    			setVisible(false);
    			isDestroyed = true;
    			reset();
    		}
    	}
    		
    }
    
	
}

